using Google.Protobuf;
using Plugin;
using RubyCodegen;
using SqlcGenRuby.Drivers;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using File = Plugin.File;

namespace SqlcGenRuby;

public class CodeGenerator
{
    private const string AutoGeneratedComment = "# auto-generated by sqlc - do not edit";

    private DbDriver? _dbDriver;
    private Options? _options;

    private Options Options
    {
        get => _options!;
        set => _options = value;
    }

    private DbDriver DbDriver
    {
        get => _dbDriver!;
        set => _dbDriver = value;
    }

    private DbDriver InstantiateDriver()
    {
        return Options.DriverName switch
        {
            DriverName.Mysql2 => new Mysql2Driver(),
            DriverName.Pg => new PgDriver(),
            _ => throw new ArgumentException($"unknown driver: {Options.DriverName}")
        };
    }

    public Task<GenerateResponse> Generate(GenerateRequest generateRequest)
    {
        Options = new Options(generateRequest);
        DbDriver = InstantiateDriver();
        var fileQueries = GetFileQueries();
        var files = fileQueries
            .Select(fq => GenerateFile(fq.Value, fq.Key))
            .AppendIfNotNull(GenerateGemfile());
        return Task.FromResult(new GenerateResponse { Files = { files } });

        Dictionary<string, Query[]> GetFileQueries()
        {
            return generateRequest.Queries
                .GroupBy(query => QueryFilenameToClassName(query.Filename))
                .ToDictionary(
                    group => group.Key,
                    group => group.ToArray());
        }

        string QueryFilenameToClassName(string filenameWithExtension)
        {
            return string.Concat(
                Path.GetFileNameWithoutExtension(filenameWithExtension).FirstCharToUpper(),
                Path.GetExtension(filenameWithExtension)[1..].FirstCharToUpper());
        }
    }

    private File GenerateFile(IList<Query> queries, string className)
    {
        var (requiredGems, moduleDeclaration) = GenerateModule(queries, className);
        var contents = $"""
                        {AutoGeneratedComment}
                        {requiredGems.Select(r => r.Build()).JoinByNewLine()}

                        {moduleDeclaration.Build()}
                        """;
        return new File
        {
            Name = $"{className.SnakeCase()}.rb",
            Contents = ByteString.CopyFromUtf8(contents)
        };
    }

    private File? GenerateGemfile()
    {
        if (!Options.GenerateGemfile)
            return null;
        var requireGems = DbDriver.GetRequiredGems().Select(gem => $"gem '{gem.Name()}'").JoinByNewLine();
        return new File
        {
            Name = "Gemfile",
            Contents = ByteString.CopyFromUtf8($"""
                                                source 'https://rubygems.org'

                                                {requireGems}
                                                """)
        };
    }

    private (IEnumerable<RequireGem>, ModuleDeclaration) GenerateModule(IList<Query> queries, string className)
    {
        var requiredGems = DbDriver.GetRequiredGems();
        var initMethod = DbDriver.GetInitMethod();
        var classDeclaration = GetClassDeclaration();
        return (requiredGems, GetModuleDeclaration());

        ModuleDeclaration GetModuleDeclaration()
        {
            return new ModuleDeclaration($"{Options.DriverName.ToString()}Codegen",
                queries
                    .SelectMany(q =>
                    {
                        IEnumerable<IComposable> members = new List<IComposable>();
                        members = members.Append(DbDriver.QueryTextConstantDeclare(q));
                        members = members.AppendIfNotNull(GetQueryColumnsDataclass(q));
                        members = members.AppendIfNotNull(GetQueryParamsDataclass(q));
                        return members;
                    })
                    .Append(classDeclaration));
        }

        ClassDeclaration GetClassDeclaration()
        {
            return new ClassDeclaration(
                className,
                new[] { initMethod }.Concat(queries.Select(GetMethodDeclaration))
            );
        }
    }

    private static SimpleStatement GenerateDataclass(string name, ClassMember classMember, IEnumerable<Column> columns,
        Options options)
    {
        var dataclassName = $"{name.FirstCharToUpper()}{classMember.Name()}";
        var dataColumns = columns.Select(c => $":{c.Name.ToLower()}").ToList();
        var dataColumnsStr = dataColumns.JoinByCommaAndFormat();
        return new SimpleStatement(dataclassName,
            new SimpleExpression(options.RubyVersion.ImmutableDataSupported()
                ? $"Data.define({dataColumnsStr})"
                : $"Struct.new({dataColumnsStr})"));
    }

    private SimpleStatement? GetQueryColumnsDataclass(Query query)
    {
        return query.Columns.Count <= 0
            ? null
            : GenerateDataclass(query.Name, ClassMember.Row, query.Columns, Options);
    }

    private SimpleStatement? GetQueryParamsDataclass(Query query)
    {
        if (query.Params.Count <= 0)
            return null;
        var columns = query.Params.Select(p => p.Column);
        return GenerateDataclass(query.Name, ClassMember.Args, columns, Options);
    }

    private MethodDeclaration GetMethodDeclaration(Query query)
    {
        var queryTextConstant = GetInterfaceName(ClassMember.Sql);
        var argInterface = GetInterfaceName(ClassMember.Args).SnakeCase();
        var returnInterface = GetInterfaceName(ClassMember.Row);
        var funcName = query.Name.SnakeCase();

        return query.Cmd switch
        {
            ":one" => DbDriver.OneDeclare(funcName, queryTextConstant, argInterface, returnInterface,
                query.Params, query.Columns),
            ":many" => DbDriver.ManyDeclare(funcName, queryTextConstant, argInterface, returnInterface,
                query.Params, query.Columns),
            ":exec" => DbDriver.ExecDeclare(funcName, queryTextConstant, argInterface, query.Params),
            ":execlastid" => DbDriver.ExecLastIdDeclare(funcName, queryTextConstant, argInterface, query.Params),
            _ => throw new InvalidDataException()
        };

        string GetInterfaceName(ClassMember classMemberType)
        {
            return $"{query.Name}{classMemberType.Name()}";
        }
    }
}